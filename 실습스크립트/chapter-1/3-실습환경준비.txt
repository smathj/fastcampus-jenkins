* 실습을 위한 패스 생성 및 이동
    mkdir ~/practice; cd ~/practice

* SSH 키 생성

    docker run --rm -it --entrypoint /keygen.sh linuxserver/openssh-server

    ~/practice/key/private.key 에 private key 를
    ~/practice/key/public.key 에 public key 저장

    chmod 400 ~/practice/key/private.key

* docker network 생성

    docker network create practice

**********************************************************************************************
* server_1 / server_2 실행

    docker run -d --rm --name=server_1 --hostname=server_1 \
         -v ~/practice/key:/key \
         -e PUBLIC_KEY_FILE=/key/public.key -e SUDO_ACCESS=true -e USER_NAME=user  \
         --network=practice \
         lscr.io/linuxserver/openssh-server:latest

    docker run -d --rm --name=server_2 --hostname=server_2 \
         -v ~/practice/key:/key \
         -e PUBLIC_KEY_FILE=/key/public.key -e SUDO_ACCESS=true -e USER_NAME=user  \
         --network=practice \
         lscr.io/linuxserver/openssh-server:latest


    ✨윈도우 인경우....
    docker run -d --rm --name=server_1 --hostname=server_1 -v ./key:/key -e PUBLIC_KEY_FILE=/key/public.key -e SUDO_ACCESS=true -e USER_NAME=user --network=practice lscr.io/linuxserver/openssh-server:latest
    docker run -d --rm --name=server_2 --hostname=server_2 -v ./key:/key -e PUBLIC_KEY_FILE=/key/public.key -e SUDO_ACCESS=true -e USER_NAME=user --network=practice lscr.io/linuxserver/openssh-server:latest




* server_1 / server_2 에 openjdk 설치

    docker exec server_1 apk add --update openjdk17 python3
    docker exec server_2 apk add --update openjdk17 python3

**********************************************************************************************
* haproxy 설치

  mkdir ~/practice/haproxy
  cat > ~/practice/haproxy/haproxy.cfg << EOF
defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s

frontend frontend
  bind 0.0.0.0:8080
  default_backend servers

backend servers
  option httpchk
  http-check send meth GET  uri /health
  server server1 server_1:8080 check
  server server2 server_2:8080 check
EOF

# haproxy docker 실행
docker run -d --name haproxy --restart always \
         --network practice \
         -p 8081:8080 \
         -v ~/practice/haproxy:/usr/local/etc/haproxy \
         haproxy

✨ 윈도우 경우
docker run -d --name haproxy --restart always --network practice -p 8081:8080 -v C:\Users\USER\Desktop\jenkins\practice\haproxy:/usr/local/etc/haproxy haproxy

- 확인 방법
  docker exec -it server_1 bash
  touch health
  python3 -m http.server 8080

**********************************************************************************************
* cicd 설치

docker run -d --rm --name=cicd \
     -v ~/practice/key/:/key \
     --hostname=cicd \
     --network=practice \
     gradle:7.6.1-jdk17 sleep 9999999999

✨ 윈도우 경우
docker run -d --rm --name=cicd -v C:\Users\USER\Desktop\jenkins\practice\key/:/key --hostname=cicd --network=practice gradle:7.6.1-jdk17 sleep 9999999999

docker exec cicd apt-get update
docker exec cicd apt-get install -y vim

