pipeline {
    // 어떠한 에이전트에서도 실행 가능함을 표현
    agent any

    // 환경 변수 지정

    /**
    environment {
    }
    */

    triggers {
        //pollSCM '*/10 * * * *'
        githubPush() // GitHub hook trigger for GITScm polling.
    }

    options {
        // 빌드를 5개만 유지
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        // github 프로젝트 설정
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/smathj/fastcampus-jenkins')
    }

    parameters {
        booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
    }


    // stages > stage > steps 순으로 구성
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: 'origin/main']],
                        userRemoteConfigs: [[
                            // credential id 는 http://localhost:8080/pipeline-syntax/ 에서 checkout step 생성을 통해 확인 가능
                            credentialsId: 'github-ssh',
                            url: 'git@github.com:smathj/fastcampus-jenkins.git']
                        ],
                        extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]]
                )
            }
        }

        stage('Build') {
            steps {
              // dir 은 디렉토리 이동
              dir("projects/spring-app") {
                  // withGradle 을 하면, Gradle 로그를 해석
                  withGradle {
                       sh "./gradlew build"
                  }
              }
            }
        }


    }

    // post 는 stage 마다 실행시킬 수도 있고, 전체가 stages가 완료된 다음에 실행 시킬 수도 있음
    post {
        always {
            mineRepository()
        }

        success {
            archiveArtifacts artifacts: 'projects/spring-app/build/libs/*-SNAPSHOT.jar'
            script {
                if (params.DEPLOY_ENABLED == true) {
                    build(
                           job: 'pipeline-deploy',
                           parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "true")],
                           wait: false,
                           propagate: false
                    )
                }
            }
        }
    }
}


def email_subject() {
    return '빌드통지!! - ${DEFAULT_SUBJECT}'
}

def email_content() {
    return '''이 이메일은 중요한 것이여!!

${DEFAULT_CONTENT}

'''
}

def custom_msg(status) {
    return " $status: Job [${env.JOB_NAME}] Logs path: ${env.BUILD_URL}/consoleText"
}
